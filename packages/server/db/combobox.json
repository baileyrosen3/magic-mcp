{
  "id": "combobox",
  "name": "Combobox",
  "description": "Autocomplete input and command palette with a list of suggestions.",
  "framework": "react",
  "library": "kibo-ui",
  "tags": [
    "autocomplete",
    "combobox",
    "command",
    "input",
    "list",
    "palette",
    "suggestions"
  ],
  "code": "// Path: ui/kibo-ui/combobox/index.tsx\n\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from '@/components/ui/command';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { cn } from '@/utils';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { ChevronsUpDownIcon } from 'lucide-react';\nimport {\n  type ComponentProps,\n  createContext,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\ntype ComboboxData = {\n  label: string;\n  value: string;\n};\n\ntype ComboboxContextType = {\n  data: ComboboxData[];\n  type: string;\n  value: string;\n  onValueChange: (value: string) => void;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  width: number;\n  setWidth: (width: number) => void;\n};\n\nconst ComboboxContext = createContext<ComboboxContextType>({\n  data: [],\n  type: 'item',\n  value: '',\n  onValueChange: () => {},\n  open: false,\n  onOpenChange: () => {},\n  width: 200,\n  setWidth: () => {},\n});\n\nexport type ComboboxProps = ComponentProps<typeof Popover> & {\n  data: ComboboxData[];\n  type: string;\n  defaultValue?: string;\n  value?: string;\n  onValueChange?: (value: string) => void;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n};\n\nexport const Combobox = ({\n  data,\n  type,\n  defaultValue,\n  value: controlledValue,\n  onValueChange: controlledOnValueChange,\n  defaultOpen = false,\n  open: controlledOpen,\n  onOpenChange: controlledOnOpenChange,\n  ...props\n}: ComboboxProps) => {\n  const [value, onValueChange] = useControllableState({\n    defaultProp: defaultValue ?? '',\n    prop: controlledValue,\n    onChange: controlledOnValueChange,\n  });\n  const [open, onOpenChange] = useControllableState({\n    defaultProp: defaultOpen,\n    prop: controlledOpen,\n    onChange: controlledOnOpenChange,\n  });\n  const [width, setWidth] = useState(200);\n\n  return (\n    <ComboboxContext.Provider\n      value={{\n        type,\n        value,\n        onValueChange,\n        open,\n        onOpenChange,\n        data,\n        width,\n        setWidth,\n      }}\n    >\n      <Popover {...props} open={open} onOpenChange={onOpenChange} />\n    </ComboboxContext.Provider>\n  );\n};\n\nexport type ComboboxTriggerProps = ComponentProps<typeof Button>;\n\nexport const ComboboxTrigger = ({\n  children,\n  ...props\n}: ComboboxTriggerProps) => {\n  const { value, data, type, setWidth } = useContext(ComboboxContext);\n  const ref = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    // Create a ResizeObserver to detect width changes\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        const newWidth = (entry.target as HTMLElement).offsetWidth;\n        if (newWidth) {\n          setWidth?.(newWidth);\n        }\n      }\n    });\n\n    if (ref.current) {\n      resizeObserver.observe(ref.current);\n    }\n\n    // Clean up the observer when component unmounts\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [setWidth]);\n\n  return (\n    <PopoverTrigger asChild>\n      <Button variant=\"outline\" {...props} ref={ref}>\n        {children ?? (\n          <span className=\"flex w-full items-center justify-between gap-2\">\n            {value\n              ? data.find((item) => item.value === value)?.label\n              : `Select ${type}...`}\n            <ChevronsUpDownIcon\n              size={16}\n              className=\"shrink-0 text-muted-foreground\"\n            />\n          </span>\n        )}\n      </Button>\n    </PopoverTrigger>\n  );\n};\n\nexport type ComboboxContentProps = ComponentProps<typeof Command> & {\n  popoverOptions?: ComponentProps<typeof PopoverContent>;\n};\n\nexport const ComboboxContent = ({\n  className,\n  popoverOptions,\n  ...props\n}: ComboboxContentProps) => {\n  const { width } = useContext(ComboboxContext);\n\n  return (\n    <PopoverContent\n      className={cn('p-0', className)}\n      style={{ width }}\n      {...popoverOptions}\n    >\n      <Command {...props} />\n    </PopoverContent>\n  );\n};\n\nexport type ComboboxInputProps = ComponentProps<typeof CommandInput>;\n\nexport const ComboboxInput = (props: ComboboxInputProps) => {\n  const { type } = useContext(ComboboxContext);\n\n  return <CommandInput placeholder={`Search ${type}...`} {...props} />;\n};\n\nexport type ComboboxListProps = ComponentProps<typeof CommandList>;\n\nexport const ComboboxList = (props: ComboboxListProps) => (\n  <CommandList {...props} />\n);\n\nexport type ComboboxEmptyProps = ComponentProps<typeof CommandEmpty>;\n\nexport const ComboboxEmpty = ({ children, ...props }: ComboboxEmptyProps) => {\n  const { type } = useContext(ComboboxContext);\n\n  return (\n    <CommandEmpty {...props}>{children ?? `No ${type} found.`}</CommandEmpty>\n  );\n};\n\nexport type ComboboxGroupProps = ComponentProps<typeof CommandGroup>;\n\nexport const ComboboxGroup = (props: ComboboxGroupProps) => (\n  <CommandGroup {...props} />\n);\n\nexport type ComboboxItemProps = ComponentProps<typeof CommandItem>;\n\nexport const ComboboxItem = (props: ComboboxItemProps) => {\n  const { onValueChange, onOpenChange } = useContext(ComboboxContext);\n\n  return (\n    <CommandItem\n      onSelect={(currentValue) => {\n        onValueChange(currentValue);\n        onOpenChange(false);\n      }}\n      {...props}\n    />\n  );\n};\n\nexport type ComboboxSeparatorProps = ComponentProps<typeof CommandSeparator>;\n\nexport const ComboboxSeparator = (props: ComboboxSeparatorProps) => (\n  <CommandSeparator {...props} />\n);",
  "createdAt": "2025-06-12T15:34:55.094Z",
  "updatedAt": "2025-06-12T15:34:55.094Z"
}