{
  "id": "counter",
  "name": "Counter",
  "description": "A simple animated counter component.",
  "framework": "react",
  "library": "hextaui",
  "tags": [
    "animated",
    "application",
    "component",
    "counter",
    "simple"
  ],
  "code": "// Path: ui/animated-counter.tsx\n\n\"use client\" \r\n\r\nimport * as React from \"react\"\r\n \r\nimport { MotionValue, motion, useSpring, useTransform } from \"motion/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { twMerge } from \"tailwind-merge\";\r\nimport clsx from \"clsx\";\r\n \r\nconst cn = (...args: any[]) => {\r\n  return twMerge(clsx(args));\r\n};\r\n \r\nconst fontSize = 40;\r\nconst padding = 10;\r\nconst height = fontSize + padding;\r\n \r\ninterface CounterProps\r\n  extends React.DetailedHTMLProps<\r\n    React.HTMLAttributes<HTMLParagraphElement>,\r\n    HTMLParagraphElement\r\n  > {\r\n  start?: number;\r\n  end: number;\r\n  duration?: number;\r\n  className?: string;\r\n  fontSize?: number;\r\n}\r\n \r\nexport const Counter = ({\r\n  start = 0,\r\n  end,\r\n  duration = end,\r\n  className,\r\n  fontSize = 30,\r\n  ...rest\r\n}: CounterProps) => {\r\n  const [value, setValue] = useState(start);\r\n \r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (value < end) {\r\n        setValue((prev) => prev + 1);\r\n      }\r\n    }, (duration / (end - start)) * 1000);\r\n \r\n    return () => clearInterval(interval);\r\n  }, [value]);\r\n \r\n  return (\r\n    <div\r\n      style={{ fontSize }}\r\n      {...rest}\r\n      className={cn(\r\n        \"flex overflow-hidden rounded px-2 leading-none text-primary font-bold \",\r\n        className\r\n      )}\r\n    >\r\n      {value >= 100000 && <Digit place={100000} value={value} />}\r\n      {value >= 10000 && <Digit place={10000} value={value} />}\r\n      {value >= 1000 && <Digit place={1000} value={value} />}\r\n      {value >= 100 && <Digit place={100} value={value} />}\r\n      {value >= 10 && <Digit place={10} value={value} />}\r\n      <Digit place={1} value={value} />\r\n    </div>\r\n  );\r\n};\r\n \r\nfunction Digit({ place, value }: { place: number; value: number }) {\r\n  let valueRoundedToPlace = Math.floor(value / place);\r\n  let animatedValue = useSpring(valueRoundedToPlace);\r\n \r\n  useEffect(() => {\r\n    animatedValue.set(valueRoundedToPlace);\r\n  }, [animatedValue, valueRoundedToPlace]);\r\n \r\n  return (\r\n    <div style={{ height }} className=\"relative w-[1ch] tabular-nums\">\r\n      {[...Array(10)].map((_, i) => (\r\n        <Number key={i} mv={animatedValue} number={i} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n \r\nfunction Number({ mv, number }: { mv: MotionValue; number: number }) {\r\n  let y = useTransform(mv, (latest) => {\r\n    let placeValue = latest % 10;\r\n    let offset = (10 + number - placeValue) % 10;\r\n \r\n    let memo = offset * height;\r\n \r\n    if (offset > 5) {\r\n      memo -= 10 * height;\r\n    }\r\n \r\n    return memo;\r\n  });\r\n \r\n  return (\r\n    <motion.span\r\n      style={{ y }}\r\n      className=\"absolute inset-0 flex items-center justify-center\"\r\n    >\r\n      {number}\r\n    </motion.span>\r\n  );\r\n}",
  "createdAt": "2025-06-12T15:33:20.576Z",
  "updatedAt": "2025-06-12T15:33:20.576Z"
}