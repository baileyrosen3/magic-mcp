{
  "id": "cursor",
  "name": "Cursor",
  "description": "A custom cursor component with optional spring animations. It can be globally applied to the page or attached specifically to a parent element.",
  "framework": "react",
  "library": "motion-primitives",
  "tags": [
    "animations",
    "applied",
    "attached",
    "can",
    "component",
    "cursor",
    "custom",
    "element",
    "globally",
    "optional",
    "page",
    "parent",
    "specifically",
    "spring"
  ],
  "code": "// Path: ui/cursor.tsx\n\n'use client';\nimport React, { useEffect, useState, useRef } from 'react';\nimport {\n  motion,\n  SpringOptions,\n  useMotionValue,\n  useSpring,\n  AnimatePresence,\n  Transition,\n  Variant,\n} from 'motion/react';\nimport { cn } from '@/utils';\n\nexport type CursorProps = {\n  children: React.ReactNode;\n  className?: string;\n  springConfig?: SpringOptions;\n  attachToParent?: boolean;\n  transition?: Transition;\n  variants?: {\n    initial: Variant;\n    animate: Variant;\n    exit: Variant;\n  };\n  onPositionChange?: (x: number, y: number) => void;\n};\n\nexport function Cursor({\n  children,\n  className,\n  springConfig,\n  attachToParent,\n  variants,\n  transition,\n  onPositionChange,\n}: CursorProps) {\n  const cursorX = useMotionValue(0);\n  const cursorY = useMotionValue(0);\n  const cursorRef = useRef<HTMLDivElement>(null);\n  const [isVisible, setIsVisible] = useState(!attachToParent);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      cursorX.set(window.innerWidth / 2);\n      cursorY.set(window.innerHeight / 2);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!attachToParent) {\n      document.body.style.cursor = 'none';\n    } else {\n      document.body.style.cursor = 'auto';\n    }\n\n    const updatePosition = (e: MouseEvent) => {\n      cursorX.set(e.clientX);\n      cursorY.set(e.clientY);\n      onPositionChange?.(e.clientX, e.clientY);\n    };\n\n    document.addEventListener('mousemove', updatePosition);\n\n    return () => {\n      document.removeEventListener('mousemove', updatePosition);\n    };\n  }, [cursorX, cursorY, onPositionChange]);\n\n  const cursorXSpring = useSpring(cursorX, springConfig || { duration: 0 });\n  const cursorYSpring = useSpring(cursorY, springConfig || { duration: 0 });\n\n  useEffect(() => {\n    const handleVisibilityChange = (visible: boolean) => {\n      setIsVisible(visible);\n    };\n\n    if (attachToParent && cursorRef.current) {\n      const parent = cursorRef.current.parentElement;\n      if (parent) {\n        parent.addEventListener('mouseenter', () => {\n          parent.style.cursor = 'none';\n          handleVisibilityChange(true);\n        });\n        parent.addEventListener('mouseleave', () => {\n          parent.style.cursor = 'auto';\n          handleVisibilityChange(false);\n        });\n      }\n    }\n\n    return () => {\n      if (attachToParent && cursorRef.current) {\n        const parent = cursorRef.current.parentElement;\n        if (parent) {\n          parent.removeEventListener('mouseenter', () => {\n            parent.style.cursor = 'none';\n            handleVisibilityChange(true);\n          });\n          parent.removeEventListener('mouseleave', () => {\n            parent.style.cursor = 'auto';\n            handleVisibilityChange(false);\n          });\n        }\n      }\n    };\n  }, [attachToParent]);\n\n  return (\n    <motion.div\n      ref={cursorRef}\n      className={cn('pointer-events-none fixed left-0 top-0 z-50', className)}\n      style={{\n        x: cursorXSpring,\n        y: cursorYSpring,\n        translateX: '-50%',\n        translateY: '-50%',\n      }}\n    >\n      <AnimatePresence>\n        {isVisible && (\n          <motion.div\n            initial='initial'\n            animate='animate'\n            exit='exit'\n            variants={variants}\n            transition={transition}\n          >\n            {children}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n}",
  "createdAt": "2025-06-12T15:53:33.051Z",
  "updatedAt": "2025-06-12T15:53:33.051Z"
}