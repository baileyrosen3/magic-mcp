{
  "id": "animated-dock",
  "name": "Animated Dock",
  "description": "A dock with animated icons that grow on hover.",
  "framework": "react",
  "library": "hextaui",
  "tags": [
    "animated",
    "application",
    "dock",
    "grow",
    "hover",
    "icons",
    "that"
  ],
  "code": "// Path: ui/animated-dock.tsx\n\n\"use client\" \r\n\r\nimport * as React from \"react\"\r\nimport { useRef } from \"react\";\r\nimport {\r\n  MotionValue,\r\n  motion,\r\n  useMotionValue,\r\n  useSpring,\r\n  useTransform,\r\n} from \"motion/react\";\r\n \r\nimport clsx from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nimport Link from \"next/link\";\r\n \r\nconst cn = (...args: any[]) => twMerge(clsx(args));\r\n \r\nexport interface AnimatedDockProps {\r\n  className?: string;\r\n  items: DockItemData[];\r\n}\r\n \r\nexport interface DockItemData {\r\n  link: string;\r\n  Icon: React.ReactNode;\r\n  target?: string;\r\n}\r\n \r\nexport const AnimatedDock = ({ className, items }: AnimatedDockProps) => {\r\n  const mouseX = useMotionValue(Infinity);\r\n \r\n  return (\r\n    <motion.div\r\n      onMouseMove={(e) => mouseX.set(e.pageX)}\r\n      onMouseLeave={() => mouseX.set(Infinity)}\r\n      className={cn(\r\n        \"mx-auto flex h-16 items-end gap-4 rounded-2xl bg-secondary/50 border border-primary/10 shadow-md px-4 pb-3\",\r\n        className,\r\n      )}\r\n    >\r\n      {items.map((item, index) => (\r\n        <DockItem key={index} mouseX={mouseX}>\r\n          <Link\r\n            href={item.link}\r\n            target={item.target}\r\n            className=\"grow flex items-center justify-center w-full h-full text-primary-foreground\"\r\n          >\r\n            {item.Icon}\r\n          </Link>\r\n        </DockItem>\r\n      ))}\r\n    </motion.div>\r\n  );\r\n};\r\n \r\ninterface DockItemProps {\r\n  mouseX: MotionValue<number>;\r\n  children: React.ReactNode;\r\n}\r\n \r\nexport const DockItem = ({ mouseX, children }: DockItemProps) => {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  const distance = useTransform(mouseX, (val) => {\r\n    const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 };\r\n    return val - bounds.x - bounds.width / 2;\r\n  });\r\n\r\n  const widthSync = useTransform(distance, [-150, 0, 150], [40, 80, 40]);\r\n  const width = useSpring(widthSync, {\r\n    mass: 0.1,\r\n    stiffness: 150,\r\n    damping: 12,\r\n  });\r\n\r\n  const iconScale = useTransform(width, [40, 80], [1, 1.5]);\r\n  const iconSpring = useSpring(iconScale, {\r\n    mass: 0.1,\r\n    stiffness: 150,\r\n    damping: 12,\r\n  });\r\n\r\n  return (\r\n    <motion.div\r\n      ref={ref}\r\n      style={{ width }}\r\n      className=\"aspect-square w-10 rounded-full bg-primary text-secondary-foreground flex items-center justify-center\"\r\n    >\r\n      <motion.div\r\n        style={{ scale: iconSpring }}\r\n        className=\"flex items-center justify-center w-full h-full grow\"\r\n      >\r\n        {children}\r\n      </motion.div>\r\n    </motion.div>\r\n  );\r\n};",
  "createdAt": "2025-06-12T15:19:21.812Z",
  "updatedAt": "2025-06-12T15:19:21.812Z"
}