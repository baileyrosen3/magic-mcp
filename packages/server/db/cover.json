{
  "id": "cover",
  "name": "Cover",
  "description": "A Cover component that wraps any children, providing beams and space effect, hover to reveal speed",
  "framework": "react",
  "library": "aceternity-ui",
  "tags": [
    "effect",
    "cover",
    "wrap",
    "children",
    "beams",
    "space",
    "hover",
    "speed"
  ],
  "code": "// Path: ui/cover.tsx\n\n\"use client\";\nimport React, { useEffect, useId, useState } from \"react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { useRef } from \"react\";\nimport { cn } from \"@/utils\";\nimport { SparklesCore } from \"@/components/ui/sparkles\";\n\nexport const Cover = ({\n  children,\n  className,\n}: {\n  children?: React.ReactNode;\n  className?: string;\n}) => {\n  const [hovered, setHovered] = useState(false);\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [containerWidth, setContainerWidth] = useState(0);\n  const [beamPositions, setBeamPositions] = useState<number[]>([]);\n\n  useEffect(() => {\n    if (ref.current) {\n      setContainerWidth(ref.current?.clientWidth ?? 0);\n\n      const height = ref.current?.clientHeight ?? 0;\n      const numberOfBeams = Math.floor(height / 10); // Adjust the divisor to control the spacing\n      const positions = Array.from(\n        { length: numberOfBeams },\n        (_, i) => (i + 1) * (height / (numberOfBeams + 1))\n      );\n      setBeamPositions(positions);\n    }\n  }, [ref.current]);\n\n  return (\n    <div\n      onMouseEnter={() => setHovered(true)}\n      onMouseLeave={() => setHovered(false)}\n      ref={ref}\n      className=\"relative hover:bg-neutral-900  group/cover inline-block dark:bg-neutral-900 bg-neutral-100 px-2 py-2  transition duration-200 rounded-sm\"\n    >\n      <AnimatePresence>\n        {hovered && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{\n              opacity: {\n                duration: 0.2,\n              },\n            }}\n            className=\"h-full w-full overflow-hidden absolute inset-0\"\n          >\n            <motion.div\n              animate={{\n                translateX: [\"-50%\", \"0%\"],\n              }}\n              transition={{\n                translateX: {\n                  duration: 10,\n                  ease: \"linear\",\n                  repeat: Infinity,\n                },\n              }}\n              className=\"w-[200%] h-full flex\"\n            >\n              <SparklesCore\n                background=\"transparent\"\n                minSize={0.4}\n                maxSize={1}\n                particleDensity={500}\n                className=\"w-full h-full\"\n                particleColor=\"#FFFFFF\"\n              />\n              <SparklesCore\n                background=\"transparent\"\n                minSize={0.4}\n                maxSize={1}\n                particleDensity={500}\n                className=\"w-full h-full\"\n                particleColor=\"#FFFFFF\"\n              />\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      {beamPositions.map((position, index) => (\n        <Beam\n          key={index}\n          hovered={hovered}\n          duration={Math.random() * 2 + 1}\n          delay={Math.random() * 2 + 1}\n          width={containerWidth}\n          style={{\n            top: `${position}px`,\n          }}\n        />\n      ))}\n      <motion.span\n        key={String(hovered)}\n        animate={{\n          scale: hovered ? 0.8 : 1,\n          x: hovered ? [0, -30, 30, -30, 30, 0] : 0,\n          y: hovered ? [0, 30, -30, 30, -30, 0] : 0,\n        }}\n        exit={{\n          filter: \"none\",\n          scale: 1,\n          x: 0,\n          y: 0,\n        }}\n        transition={{\n          duration: 0.2,\n          x: {\n            duration: 0.2,\n            repeat: Infinity,\n            repeatType: \"loop\",\n          },\n          y: {\n            duration: 0.2,\n            repeat: Infinity,\n            repeatType: \"loop\",\n          },\n          scale: {\n            duration: 0.2,\n          },\n          filter: {\n            duration: 0.2,\n          },\n        }}\n        className={cn(\n          \"dark:text-white inline-block text-neutral-900 relative z-20 group-hover/cover:text-white transition duration-200\",\n          className\n        )}\n      >\n        {children}\n      </motion.span>\n      <CircleIcon className=\"absolute -right-[2px] -top-[2px]\" />\n      <CircleIcon className=\"absolute -bottom-[2px] -right-[2px]\" delay={0.4} />\n      <CircleIcon className=\"absolute -left-[2px] -top-[2px]\" delay={0.8} />\n      <CircleIcon className=\"absolute -bottom-[2px] -left-[2px]\" delay={1.6} />\n    </div>\n  );\n};\n\nexport const Beam = ({\n  className,\n  delay,\n  duration,\n  hovered,\n  width = 600,\n  ...svgProps\n}: {\n  className?: string;\n  delay?: number;\n  duration?: number;\n  hovered?: boolean;\n  width?: number;\n} & React.ComponentProps<typeof motion.svg>) => {\n  const id = useId();\n\n  return (\n    <motion.svg\n      width={width ?? \"600\"}\n      height=\"1\"\n      viewBox={`0 0 ${width ?? \"600\"} 1`}\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"absolute inset-x-0 w-full\", className)}\n      {...svgProps}\n    >\n      <motion.path\n        d={`M0 0.5H${width ?? \"600\"}`}\n        stroke={`url(#svgGradient-${id})`}\n      />\n\n      <defs>\n        <motion.linearGradient\n          id={`svgGradient-${id}`}\n          key={String(hovered)}\n          gradientUnits=\"userSpaceOnUse\"\n          initial={{\n            x1: \"0%\",\n            x2: hovered ? \"-10%\" : \"-5%\",\n            y1: 0,\n            y2: 0,\n          }}\n          animate={{\n            x1: \"110%\",\n            x2: hovered ? \"100%\" : \"105%\",\n            y1: 0,\n            y2: 0,\n          }}\n          transition={{\n            duration: hovered ? 0.5 : duration ?? 2,\n            ease: \"linear\",\n            repeat: Infinity,\n            delay: hovered ? Math.random() * (1 - 0.2) + 0.2 : 0,\n            repeatDelay: hovered ? Math.random() * (2 - 1) + 1 : delay ?? 1,\n          }}\n        >\n          <stop stopColor=\"#2EB9DF\" stopOpacity=\"0\" />\n          <stop stopColor=\"#3b82f6\" />\n          <stop offset=\"1\" stopColor=\"#3b82f6\" stopOpacity=\"0\" />\n        </motion.linearGradient>\n      </defs>\n    </motion.svg>\n  );\n};\n\nexport const CircleIcon = ({\n  className,\n  delay,\n}: {\n  className?: string;\n  delay?: number;\n}) => {\n  return (\n    <div\n      className={cn(\n        `pointer-events-none animate-pulse group-hover/cover:hidden group-hover/cover:opacity-100 group h-2 w-2 rounded-full bg-neutral-600 dark:bg-white opacity-20 group-hover/cover:bg-white`,\n        className\n      )}\n    ></div>\n  );\n};",
  "createdAt": "2025-06-12T15:30:37.008Z",
  "updatedAt": "2025-06-12T15:30:37.008Z"
}