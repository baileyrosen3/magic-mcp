{
  "id": "ai-chat-input",
  "name": "Ai Chat Input",
  "description": "Animated and interactive AI chat input component.",
  "framework": "react",
  "library": "hextaui",
  "tags": [
    "ai",
    "animated",
    "application",
    "chat",
    "component",
    "input",
    "interactive"
  ],
  "code": "// Path: ui/ai-chat-input.tsx\n\n\"use client\" \r\n\r\nimport * as React from \"react\"\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { Lightbulb, Mic, Globe, Paperclip, Send } from \"lucide-react\";\r\nimport { AnimatePresence, motion } from \"motion/react\";\r\n \r\nconst PLACEHOLDERS = [\r\n  \"Generate website with HextaUI\",\r\n  \"Create a new project with Next.js\",\r\n  \"What is the meaning of life?\",\r\n  \"What is the best way to learn React?\",\r\n  \"How to cook a delicious meal?\",\r\n  \"Summarize this article\",\r\n];\r\n \r\nconst AIChatInput = () => {\r\n  const [placeholderIndex, setPlaceholderIndex] = useState(0);\r\n  const [showPlaceholder, setShowPlaceholder] = useState(true);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [thinkActive, setThinkActive] = useState(false);\r\n  const [deepSearchActive, setDeepSearchActive] = useState(false);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const wrapperRef = useRef<HTMLDivElement>(null);\r\n \r\n  // Cycle placeholder text when input is inactive\r\n  useEffect(() => {\r\n    if (isActive || inputValue) return;\r\n \r\n    const interval = setInterval(() => {\r\n      setShowPlaceholder(false);\r\n      setTimeout(() => {\r\n        setPlaceholderIndex((prev) => (prev + 1) % PLACEHOLDERS.length);\r\n        setShowPlaceholder(true);\r\n      }, 400);\r\n    }, 3000);\r\n \r\n    return () => clearInterval(interval);\r\n  }, [isActive, inputValue]);\r\n \r\n  // Close input when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        wrapperRef.current &&\r\n        !wrapperRef.current.contains(event.target as Node)\r\n      ) {\r\n        if (!inputValue) setIsActive(false);\r\n      }\r\n    };\r\n \r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, [inputValue]);\r\n \r\n  const handleActivate = () => setIsActive(true);\r\n \r\n  const containerVariants = {\r\n    collapsed: {\r\n      height: 68,\r\n      boxShadow: \"0 2px 8px 0 rgba(0,0,0,0.08)\",\r\n      transition: { type: \"spring\", stiffness: 120, damping: 18 },\r\n    },\r\n    expanded: {\r\n      height: 128,\r\n      boxShadow: \"0 8px 32px 0 rgba(0,0,0,0.16)\",\r\n      transition: { type: \"spring\", stiffness: 120, damping: 18 },\r\n    },\r\n  };\r\n \r\n  const placeholderContainerVariants = {\r\n    initial: {},\r\n    animate: { transition: { staggerChildren: 0.025 } },\r\n    exit: { transition: { staggerChildren: 0.015, staggerDirection: -1 } },\r\n  };\r\n \r\n  const letterVariants = {\r\n    initial: {\r\n      opacity: 0,\r\n      filter: \"blur(12px)\",\r\n      y: 10,\r\n    },\r\n    animate: {\r\n      opacity: 1,\r\n      filter: \"blur(0px)\",\r\n      y: 0,\r\n      transition: {\r\n        opacity: { duration: 0.25 },\r\n        filter: { duration: 0.4 },\r\n        y: { type: \"spring\", stiffness: 80, damping: 20 },\r\n      },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      filter: \"blur(12px)\",\r\n      y: -10,\r\n      transition: {\r\n        opacity: { duration: 0.2 },\r\n        filter: { duration: 0.3 },\r\n        y: { type: \"spring\", stiffness: 80, damping: 20 },\r\n      },\r\n    },\r\n  };\r\n \r\n  return (\r\n    <div className=\"w-full min-h-screen flex justify-center items-center text-black\">\r\n      <motion.div\r\n        ref={wrapperRef}\r\n        className=\"w-full max-w-3xl\"\r\n        variants={containerVariants}\r\n        animate={isActive || inputValue ? \"expanded\" : \"collapsed\"}\r\n        initial=\"collapsed\"\r\n        style={{ overflow: \"hidden\", borderRadius: 32, background: \"#fff\" }}\r\n        onClick={handleActivate}\r\n      >\r\n        <div className=\"flex flex-col items-stretch w-full h-full\">\r\n          {/* Input Row */}\r\n          <div className=\"flex items-center gap-2 p-3 rounded-full bg-white max-w-3xl w-full\">\r\n            <button\r\n              className=\"p-3 rounded-full hover:bg-gray-100 transition\"\r\n              title=\"Attach file\"\r\n              type=\"button\"\r\n              tabIndex={-1}\r\n            >\r\n              <Paperclip size={20} />\r\n            </button>\r\n \r\n            {/* Text Input & Placeholder */}\r\n            <div className=\"relative flex-1\">\r\n              <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={(e) => setInputValue(e.target.value)}\r\n                className=\"flex-1 border-0 outline-0 rounded-md py-2 text-base bg-transparent w-full font-normal\"\r\n                style={{ position: \"relative\", zIndex: 1 }}\r\n                onFocus={handleActivate}\r\n              />\r\n              <div className=\"absolute left-0 top-0 w-full h-full pointer-events-none flex items-center px-3 py-2\">\r\n                <AnimatePresence mode=\"wait\">\r\n                  {showPlaceholder && !isActive && !inputValue && (\r\n                    <motion.span\r\n                      key={placeholderIndex}\r\n                      className=\"absolute left-0 top-1/2 -translate-y-1/2 text-gray-400 select-none pointer-events-none\"\r\n                      style={{\r\n                        whiteSpace: \"nowrap\",\r\n                        overflow: \"hidden\",\r\n                        textOverflow: \"ellipsis\",\r\n                        zIndex: 0,\r\n                      }}\r\n                      variants={placeholderContainerVariants}\r\n                      initial=\"initial\"\r\n                      animate=\"animate\"\r\n                      exit=\"exit\"\r\n                    >\r\n                      {PLACEHOLDERS[placeholderIndex]\r\n                        .split(\"\")\r\n                        .map((char, i) => (\r\n                          <motion.span\r\n                            key={i}\r\n                            variants={letterVariants}\r\n                            style={{ display: \"inline-block\" }}\r\n                          >\r\n                            {char === \" \" ? \"\\u00A0\" : char}\r\n                          </motion.span>\r\n                        ))}\r\n                    </motion.span>\r\n                  )}\r\n                </AnimatePresence>\r\n              </div>\r\n            </div>\r\n \r\n            <button\r\n              className=\"p-3 rounded-full hover:bg-gray-100 transition\"\r\n              title=\"Voice input\"\r\n              type=\"button\"\r\n              tabIndex={-1}\r\n            >\r\n              <Mic size={20} />\r\n            </button>\r\n            <button\r\n              className=\"flex items-center gap-1 bg-black hover:bg-zinc-700 text-white p-3 rounded-full font-medium justify-center\"\r\n              title=\"Send\"\r\n              type=\"button\"\r\n              tabIndex={-1}\r\n            >\r\n              <Send size={18} />\r\n            </button>\r\n          </div>\r\n \r\n          {/* Expanded Controls */}\r\n          <motion.div\r\n            className=\"w-full flex justify-start px-4 items-center text-sm\"\r\n            variants={{\r\n              hidden: {\r\n                opacity: 0,\r\n                y: 20,\r\n                pointerEvents: \"none\" as const,\r\n                transition: { duration: 0.25 },\r\n              },\r\n              visible: {\r\n                opacity: 1,\r\n                y: 0,\r\n                pointerEvents: \"auto\" as const,\r\n                transition: { duration: 0.35, delay: 0.08 },\r\n              },\r\n            }}\r\n            initial=\"hidden\"\r\n            animate={isActive || inputValue ? \"visible\" : \"hidden\"}\r\n            style={{ marginTop: 8 }}\r\n          >\r\n            <div className=\"flex gap-3 items-center\">\r\n              {/* Think Toggle */}\r\n              <button\r\n                className={`flex items-center gap-1 px-4 py-2 rounded-full transition-all font-medium group ${\r\n                  thinkActive\r\n                    ? \"bg-blue-600/10 outline outline-blue-600/60 text-blue-950\"\r\n                    : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\r\n                }`}\r\n                title=\"Think\"\r\n                type=\"button\"\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  setThinkActive((a) => !a);\r\n                }}\r\n              >\r\n                <Lightbulb\r\n                  className=\"group-hover:fill-yellow-300 transition-all\"\r\n                  size={18}\r\n                />\r\n                Think\r\n              </button>\r\n \r\n              {/* Deep Search Toggle */}\r\n              <motion.button\r\n                className={`flex items-center px-4 gap-1 py-2 rounded-full transition font-medium whitespace-nowrap overflow-hidden justify-start  ${\r\n                  deepSearchActive\r\n                    ? \"bg-blue-600/10 outline outline-blue-600/60 text-blue-950\"\r\n                    : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\r\n                }`}\r\n                title=\"Deep Search\"\r\n                type=\"button\"\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  setDeepSearchActive((a) => !a);\r\n                }}\r\n                initial={false}\r\n                animate={{\r\n                  width: deepSearchActive ? 125 : 36,\r\n                  paddingLeft: deepSearchActive ? 8 : 9,\r\n                }}\r\n              >\r\n                <div className=\"flex-1\">\r\n                  <Globe size={18} />\r\n                </div>\r\n                <motion.span\r\n                className=\"pb-[2px]\"\r\n                  initial={false}\r\n                  animate={{\r\n                    opacity: deepSearchActive ? 1 : 0,\r\n                  }}\r\n                >\r\n                  Deep Search\r\n                </motion.span>\r\n              </motion.button>\r\n            </div>\r\n          </motion.div>\r\n        </div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n};\r\n \r\nexport { AIChatInput };",
  "createdAt": "2025-06-12T15:19:18.666Z",
  "updatedAt": "2025-06-12T15:19:18.666Z"
}